services:
  front-prototype:
    build: ./front
    container_name: front-prototype
    ports:
      - "82:80"
    depends_on:
      search-prototype:
        condition: service_started
    networks:
      - webservices
    develop:
      watch:
        - action: sync
          path: ./front
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./front/Dockerfile
  search-prototype:
    build: ./search
    container_name: search-prototype
    expose:
      - "8080"
    depends_on:
      ollama-embedder-prototype:
        condition: service_started
      ollama-generator-prototype:
        condition: service_started
      postgres-prototype:
        condition: service_healthy
    networks:
      - webservices
    develop:
      watch:
        - action: sync
          path: ./search
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./search/Dockerfile

  ollama-generator-prototype:
    image: ollama/ollama
    container_name: ollama-generator-prototype
    hostname: ollama-generator
    expose:
      - "11434"
    volumes:
      - ./generator/.data:/root/.ollama
      - ./generator/entrypoint.sh:/entrypoint.sh
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    restart: unless-stopped
    networks:
      - webservices
    develop:
      watch:
        - action: sync
          path: ./generator
          target: /app
          ignore:
            - .data/
        - action: rebuild
          path: ./generator/Dockerfile

  ollama-embedder-prototype:
    image: ollama/ollama
    container_name: ollama-embedder-prototype
    hostname: ollama-embedder
    expose:
      - "11434"
    volumes:
      - ./embedder/.data:/root/.ollama
      - ./embedder/entrypoint.sh:/entrypoint.sh
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    restart: unless-stopped
    networks:
      - webservices
    develop:
      watch:
        - action: sync
          path: ./embedder
          target: /app
          ignore:
            - .data/
        - action: rebuild
          path: ./embedder/Dockerfile

  postgres-prototype:
    image: pgvector/pgvector:pg17
    container_name: postgres-prototype
    hostname: postgres
    env_file:
      - ./.env
    environment:
      - POSTGRES_USER=${SEARCH_DB_USER}
      - POSTGRES_PASSWORD=${SEARCH_DB_PASSWORD}
      - POSTGRES_DB=${SEARCH_DB_NAME}
    expose:
      - ${SEARCH_DB_PORT}
    volumes:
      - ./postgres/.data:/var/lib/postgresql/.data
      - ./postgres/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SEARCH_DB_USER} -d ${SEARCH_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - webservices

networks:
  webservices:
