// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resources.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkResourceOwnership = `-- name: CheckResourceOwnership :one
SELECT COUNT(*) > 0 as owned
FROM resources
WHERE id = $1 AND (owner_id = $2 OR owner_id IS NULL OR owner_id = '')
`

type CheckResourceOwnershipParams struct {
	ID      pgtype.UUID `db:"id" json:"id"`
	OwnerID pgtype.UUID `db:"owner_id" json:"owner_id"`
}

func (q *Queries) CheckResourceOwnership(ctx context.Context, arg CheckResourceOwnershipParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkResourceOwnership, arg.ID, arg.OwnerID)
	var owned bool
	err := row.Scan(&owned)
	return owned, err
}

const countResourcesByOwner = `-- name: CountResourcesByOwner :one
SELECT COUNT(*) as count
FROM resources
WHERE owner_id = $1
`

func (q *Queries) CountResourcesByOwner(ctx context.Context, ownerID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countResourcesByOwner, ownerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countResourcesByStatus = `-- name: CountResourcesByStatus :one
SELECT COUNT(*) as count
FROM resources
WHERE status = $1
`

func (q *Queries) CountResourcesByStatus(ctx context.Context, status ResourceStatus) (int64, error) {
	row := q.db.QueryRow(ctx, countResourcesByStatus, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createResource = `-- name: CreateResource :one
INSERT INTO resources (
    name, type, url, extracted_content, raw_content, owner_id
) VALUES (
    $1, $2, $3, $4, $5,  $6
) RETURNING id, name, type, url, extracted_content, raw_content, status, owner_id, created_at, updated_at
`

type CreateResourceParams struct {
	Name             string       `db:"name" json:"name"`
	Type             ResourceType `db:"type" json:"type"`
	Url              pgtype.Text  `db:"url" json:"url"`
	ExtractedContent pgtype.Text  `db:"extracted_content" json:"extracted_content"`
	RawContent       []byte       `db:"raw_content" json:"raw_content"`
	OwnerID          pgtype.UUID  `db:"owner_id" json:"owner_id"`
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) (Resources, error) {
	row := q.db.QueryRow(ctx, createResource,
		arg.Name,
		arg.Type,
		arg.Url,
		arg.ExtractedContent,
		arg.RawContent,
		arg.OwnerID,
	)
	var i Resources
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Url,
		&i.ExtractedContent,
		&i.RawContent,
		&i.Status,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUsersResource = `-- name: DeleteUsersResource :exec
DELETE FROM resources
WHERE id = $1 AND owner_id = $2
`

type DeleteUsersResourceParams struct {
	ID      pgtype.UUID `db:"id" json:"id"`
	OwnerID pgtype.UUID `db:"owner_id" json:"owner_id"`
}

func (q *Queries) DeleteUsersResource(ctx context.Context, arg DeleteUsersResourceParams) error {
	_, err := q.db.Exec(ctx, deleteUsersResource, arg.ID, arg.OwnerID)
	return err
}

const getResources = `-- name: GetResources :many
SELECT id, name, type, url, extracted_content, raw_content, status, owner_id, created_at, updated_at
FROM resources
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type GetResourcesParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetResources(ctx context.Context, arg GetResourcesParams) ([]Resources, error) {
	rows, err := q.db.Query(ctx, getResources, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Resources{}
	for rows.Next() {
		var i Resources
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Url,
			&i.ExtractedContent,
			&i.RawContent,
			&i.Status,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourcesByOwnerID = `-- name: GetResourcesByOwnerID :many
SELECT id, name, type, url, extracted_content, raw_content, status, owner_id, created_at, updated_at
FROM resources
WHERE owner_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetResourcesByOwnerIDParams struct {
	OwnerID pgtype.UUID `db:"owner_id" json:"owner_id"`
	Limit   int32       `db:"limit" json:"limit"`
	Offset  int32       `db:"offset" json:"offset"`
}

func (q *Queries) GetResourcesByOwnerID(ctx context.Context, arg GetResourcesByOwnerIDParams) ([]Resources, error) {
	rows, err := q.db.Query(ctx, getResourcesByOwnerID, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Resources{}
	for rows.Next() {
		var i Resources
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Url,
			&i.ExtractedContent,
			&i.RawContent,
			&i.Status,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourcesByStatus = `-- name: GetResourcesByStatus :many
SELECT id, name, type, url, extracted_content, raw_content, status, owner_id, created_at, updated_at
FROM resources
WHERE status = $1
ORDER BY created_at DESC
`

func (q *Queries) GetResourcesByStatus(ctx context.Context, status ResourceStatus) ([]Resources, error) {
	rows, err := q.db.Query(ctx, getResourcesByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Resources{}
	for rows.Next() {
		var i Resources
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Url,
			&i.ExtractedContent,
			&i.RawContent,
			&i.Status,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourcesByType = `-- name: GetResourcesByType :many
SELECT id, name, type, url, extracted_content, raw_content, status, owner_id, created_at, updated_at
FROM resources
WHERE type = $1
ORDER BY created_at DESC
`

func (q *Queries) GetResourcesByType(ctx context.Context, type_ ResourceType) ([]Resources, error) {
	rows, err := q.db.Query(ctx, getResourcesByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Resources{}
	for rows.Next() {
		var i Resources
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Url,
			&i.ExtractedContent,
			&i.RawContent,
			&i.Status,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourcesCount = `-- name: GetResourcesCount :one
SELECT COUNT(*) as count
FROM resources
WHERE
    ($1::text IS NULL OR name ILIKE '%' || $1 || '%') AND
    ($2::resource_type IS NULL OR type = $2) AND
    ($3::resource_status IS NULL OR status = $3) AND
    ($4::text IS NULL OR owner_id = $4)
`

type GetResourcesCountParams struct {
	Column1 string         `db:"column_1" json:"column_1"`
	Column2 ResourceType   `db:"column_2" json:"column_2"`
	Column3 ResourceStatus `db:"column_3" json:"column_3"`
	Column4 string         `db:"column_4" json:"column_4"`
}

func (q *Queries) GetResourcesCount(ctx context.Context, arg GetResourcesCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getResourcesCount,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getResourcesWithFilter = `-- name: GetResourcesWithFilter :many
SELECT id, name, type, url, extracted_content, raw_content, status, owner_id, created_at, updated_at
FROM resources
WHERE
    ($1::text IS NULL OR name ILIKE '%' || $1 || '%') AND
    ($2::resource_type IS NULL OR type = $2) AND
    ($3::resource_status IS NULL OR status = $3) AND
    ($4::text IS NULL OR owner_id = $4)
ORDER BY created_at DESC
LIMIT $5 OFFSET $6
`

type GetResourcesWithFilterParams struct {
	Column1 string         `db:"column_1" json:"column_1"`
	Column2 ResourceType   `db:"column_2" json:"column_2"`
	Column3 ResourceStatus `db:"column_3" json:"column_3"`
	Column4 string         `db:"column_4" json:"column_4"`
	Limit   int32          `db:"limit" json:"limit"`
	Offset  int32          `db:"offset" json:"offset"`
}

func (q *Queries) GetResourcesWithFilter(ctx context.Context, arg GetResourcesWithFilterParams) ([]Resources, error) {
	rows, err := q.db.Query(ctx, getResourcesWithFilter,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Resources{}
	for rows.Next() {
		var i Resources
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Url,
			&i.ExtractedContent,
			&i.RawContent,
			&i.Status,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersResourceByID = `-- name: GetUsersResourceByID :one
SELECT id, name, type, url, extracted_content, raw_content, status, owner_id, created_at, updated_at
FROM resources
WHERE id = $1 AND owner_id = $2
`

type GetUsersResourceByIDParams struct {
	ID      pgtype.UUID `db:"id" json:"id"`
	OwnerID pgtype.UUID `db:"owner_id" json:"owner_id"`
}

func (q *Queries) GetUsersResourceByID(ctx context.Context, arg GetUsersResourceByIDParams) (Resources, error) {
	row := q.db.QueryRow(ctx, getUsersResourceByID, arg.ID, arg.OwnerID)
	var i Resources
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Url,
		&i.ExtractedContent,
		&i.RawContent,
		&i.Status,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateResourceStatus = `-- name: UpdateResourceStatus :one
UPDATE resources
SET status = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, name, type, url, extracted_content, raw_content, status, owner_id, created_at, updated_at
`

type UpdateResourceStatusParams struct {
	ID     pgtype.UUID    `db:"id" json:"id"`
	Status ResourceStatus `db:"status" json:"status"`
}

func (q *Queries) UpdateResourceStatus(ctx context.Context, arg UpdateResourceStatusParams) (Resources, error) {
	row := q.db.QueryRow(ctx, updateResourceStatus, arg.ID, arg.Status)
	var i Resources
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Url,
		&i.ExtractedContent,
		&i.RawContent,
		&i.Status,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUsersResource = `-- name: UpdateUsersResource :one
UPDATE resources
SET
    name = COALESCE($3, name),
    type = COALESCE($4, type),
    url = COALESCE($5, url),
    extracted_content = COALESCE($6, extracted_content),
    raw_content = COALESCE($7, raw_content),
    status = COALESCE($8, status),
    owner_id = COALESCE($9, owner_id),
    updated_at = NOW()
WHERE id = $1 AND owner_id = $2
RETURNING id, name, type, url, extracted_content, raw_content, status, owner_id, created_at, updated_at
`

type UpdateUsersResourceParams struct {
	ID               pgtype.UUID    `db:"id" json:"id"`
	OwnerID          pgtype.UUID    `db:"owner_id" json:"owner_id"`
	Name             string         `db:"name" json:"name"`
	Type             ResourceType   `db:"type" json:"type"`
	Url              pgtype.Text    `db:"url" json:"url"`
	ExtractedContent pgtype.Text    `db:"extracted_content" json:"extracted_content"`
	RawContent       []byte         `db:"raw_content" json:"raw_content"`
	Status           ResourceStatus `db:"status" json:"status"`
	OwnerID_2        pgtype.UUID    `db:"owner_id_2" json:"owner_id_2"`
}

func (q *Queries) UpdateUsersResource(ctx context.Context, arg UpdateUsersResourceParams) (Resources, error) {
	row := q.db.QueryRow(ctx, updateUsersResource,
		arg.ID,
		arg.OwnerID,
		arg.Name,
		arg.Type,
		arg.Url,
		arg.ExtractedContent,
		arg.RawContent,
		arg.Status,
		arg.OwnerID_2,
	)
	var i Resources
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Url,
		&i.ExtractedContent,
		&i.RawContent,
		&i.Status,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
