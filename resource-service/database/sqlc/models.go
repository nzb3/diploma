// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ResourceStatus string

const (
	ResourceStatusPending    ResourceStatus = "pending"
	ResourceStatusProcessing ResourceStatus = "processing"
	ResourceStatusCompleted  ResourceStatus = "completed"
	ResourceStatusFailed     ResourceStatus = "failed"
)

func (e *ResourceStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ResourceStatus(s)
	case string:
		*e = ResourceStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ResourceStatus: %T", src)
	}
	return nil
}

type NullResourceStatus struct {
	ResourceStatus ResourceStatus `json:"resource_status"`
	Valid          bool           `json:"valid"` // Valid is true if ResourceStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullResourceStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ResourceStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ResourceStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullResourceStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ResourceStatus), nil
}

type ResourceType string

const (
	ResourceTypePdf ResourceType = "pdf"
	ResourceTypeTxt ResourceType = "txt"
	ResourceTypeUrl ResourceType = "url"
)

func (e *ResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ResourceType(s)
	case string:
		*e = ResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ResourceType: %T", src)
	}
	return nil
}

type NullResourceType struct {
	ResourceType ResourceType `json:"resource_type"`
	Valid        bool         `json:"valid"` // Valid is true if ResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.ResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ResourceType), nil
}

type Events struct {
	ID        pgtype.UUID      `db:"id" json:"id"`
	Name      string           `db:"name" json:"name"`
	Topic     string           `db:"topic" json:"topic"`
	Payload   []byte           `db:"payload" json:"payload"`
	Sent      bool             `db:"sent" json:"sent"`
	EventTime pgtype.Timestamp `db:"event_time" json:"event_time"`
}

type Resources struct {
	ID               pgtype.UUID        `db:"id" json:"id"`
	Name             string             `db:"name" json:"name"`
	Type             ResourceType       `db:"type" json:"type"`
	Url              pgtype.Text        `db:"url" json:"url"`
	ExtractedContent pgtype.Text        `db:"extracted_content" json:"extracted_content"`
	RawContent       []byte             `db:"raw_content" json:"raw_content"`
	Status           ResourceStatus     `db:"status" json:"status"`
	OwnerID          pgtype.UUID        `db:"owner_id" json:"owner_id"`
	CreatedAt        pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}
