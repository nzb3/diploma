// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: event.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (name, topic, payload)
VALUES ($1, $2, $3)
RETURNING id, name, topic, payload, sent, event_time
`

type CreateEventParams struct {
	Name    string `db:"name" json:"name"`
	Topic   string `db:"topic" json:"topic"`
	Payload []byte `db:"payload" json:"payload"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Events, error) {
	row := q.db.QueryRow(ctx, createEvent, arg.Name, arg.Topic, arg.Payload)
	var i Events
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Topic,
		&i.Payload,
		&i.Sent,
		&i.EventTime,
	)
	return i, err
}

const getNotSentEvents = `-- name: GetNotSentEvents :many
SELECT id, name, topic, payload, sent, event_time
FROM events
WHERE sent=false
ORDER BY event_time ASC
LIMIT $1 OFFSET $2
`

type GetNotSentEventsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetNotSentEvents(ctx context.Context, arg GetNotSentEventsParams) ([]Events, error) {
	rows, err := q.db.Query(ctx, getNotSentEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Events{}
	for rows.Next() {
		var i Events
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Topic,
			&i.Payload,
			&i.Sent,
			&i.EventTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markEventAsSent = `-- name: MarkEventAsSent :exec
UPDATE events 
SET sent = true 
WHERE id = $1
`

func (q *Queries) MarkEventAsSent(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, markEventAsSent, id)
	return err
}
