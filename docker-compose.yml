services:
  front:
    build: ./front
    container_name: front
    ports:
      - "80:80"
    restart: on-failure
    depends_on:
      search-service:
        condition: service_started
      resource-service:
        condition: service_started
    networks:
      webservices:
        aliases:
          - front
    develop:
      watch:
        - action: sync
          path: ./front
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./front/Dockerfile

  api-gateway:
    image: kong:latest
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
    volumes:
      - ./kong.yml:/etc/kong/kong.yml
    ports:
      - "8000:8000"   # Public HTTP port
      - "8001:8001"   # Admin API
    depends_on:
      - search-service
      - resource-service

  search-service:
    build:
      context: ./search-service
      target: release
      dockerfile: Dockerfile
    container_name: search-service
    restart: on-failure
    env_file:
      - search-service/.env
    ports:
      - "8081:8081"
    depends_on:
      ollama-embedder:
        condition: service_started
      ollama-generator:
        condition: service_started
      search-database:
        condition: service_healthy
    networks:
      webservices:
        aliases:
          - search-service
    develop:
      watch:
        - action: sync
          path: ./search-service
          target: /app
        - action: rebuild
          path: ./search-service/Dockerfile

  search-database:
    image: pgvector/pgvector:pg17
    container_name: search-database
    hostname: search-database
    env_file:
      - ./.env
    environment:
      - POSTGRES_USER=${SEARCH_DB_USER}
      - POSTGRES_PASSWORD=${SEARCH_DB_PASSWORD}
      - POSTGRES_DB=${SEARCH_DB_NAME}
    ports:
      - ${SEARCH_DB_PORT}:5432
    volumes:
      - ./search-database/.data:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SEARCH_DB_USER} -d ${SEARCH_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      webservices:
        aliases:
          - search-database

  resource-service:
    build:
      context: ./resource-service
      target: release
      dockerfile: Dockerfile
    container_name: resource-service
    restart: on-failure
    env_file:
      - resource-service/.env
    ports:
      - "8082:8082"
    depends_on:
      resource-database:
        condition: service_healthy
    networks:
      webservices:
        aliases:
          - resource-service
    develop:
      watch:
        - action: sync
          path: ./resource-service
          target: /app
        - action: rebuild
          path: ./resource-service/Dockerfile

  resource-database:
    image: postgres:17
    container_name: resource-database
    hostname: resource-database
    env_file:
      - ./.env
    environment:
      - POSTGRES_USER=${RESOURCE_DB_USER}
      - POSTGRES_PASSWORD=${RESOURCE_DB_PASSWORD}
      - POSTGRES_DB=${RESOURCE_DB_NAME}
    ports:
      - ${RESOURCE_DB_PORT}:5432
    volumes:
      - ./resource-database/.data:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${RESOURCE_DB_USER} -d ${RESOURCE_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      webservices:
        aliases:
          - resource-database

  ollama-generator:
    image: ollama/ollama
    container_name: ollama-generator
    hostname: ollama-generator
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_NUM_PARALLEL=2
    volumes:
      - ./generator/.data:/root/.ollama
      - ./generator/entrypoint.sh:/entrypoint.sh
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    restart: on-failure
    networks:
      webservices:
        aliases:
          - ollama-generator
    develop:
      watch:
        - action: sync
          path: ./generator
          target: /app
          ignore:
            - .data/
        - action: rebuild
          path: ./generator/Dockerfile

  ollama-embedder:
    image: ollama/ollama
    container_name: ollama-embedder
    hostname: ollama-embedder
    ports:
      - "11435:11434"
    environment:
      - OLLAMA_NUM_PARALLEL=2
    volumes:
      - ./embedder/.data:/root/.ollama
      - ./embedder/entrypoint.sh:/entrypoint.sh
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    restart: on-failure
    networks:
      webservices:
        aliases:
          - ollama-embedder
    develop:
      watch:
        - action: sync
          path: ./embedder
          target: /app
          ignore:
            - .data/
        - action: rebuild
          path: ./embedder/Dockerfile

  auth:
    image: quay.io/keycloak/keycloak:23.0.2
    container_name: auth
    env_file:
      - .env
    environment:
      KEYCLOAK_ADMIN: ${AUTH_ADMIN_LOGIN}
      KEYCLOAK_ADMIN_PASSWORD: ${AUTH_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: ${AUTH_DB_URL}
      KC_DB_USERNAME: ${AUTH_DB_USER}
      KC_DB_PASSWORD: ${AUTH_DB_PASSWORD}
      KC_HOSTNAME: ${AUTH_HOST}
      KC_HOSTNAME_PORT: ${AUTH_PORT}
      KC_HOSTNAME_STRICT: 'false'
      KC_HOSTNAME_STRICT_HTTPS: 'false'
      KC_HTTP_ENABLED: 'true'
    command: start
    restart: on-failure
    depends_on:
      auth-database:
        condition: service_healthy
    ports:
      - '8080:8080'
    networks:
      webservices:
        aliases:
          - auth

  auth-database:
    image: postgres:17
    volumes:
      - ./auth-database/.data:/var/lib/postgresql/data
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=${AUTH_DB_NAME}
      - POSTGRES_USER=${AUTH_DB_USER}
      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD}
    ports:
      - ${AUTH_DB_PORT}:5432
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${AUTH_DB_NAME} -d ${AUTH_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      webservices:
        aliases:
          - auth-database

networks:
  webservices:
    driver: bridge
